# ==============================================================================
#   WARNING!!  This file is overwritten by the Block UI Styler while generating
#   the automation code. Any modifications to this file will be lost after
#   generating the code again.
#
#        Filename:  C:\Users\cbr\Documents\Development\NXTools\src\ui\delete_toolholder\del_toolholder_ui.py
#
#         This file was generated by the NX Block UI Styler
#         Created by: cbr
#               Version: NX 2212
#               Date: 04-14-2023  (Format: mm-dd-yyyy)
#               Time: 13:02 (Format: hh-mm)
#
# ==============================================================================

# ==============================================================================
#   Purpose:  This TEMPLATE file contains Python source to guide you in the
#   construction of your Block application dialog. The generation of your
#   dialog file (.dlx extension) is the first step towards dialog construction
#   within NX.  You must now create a NX Open application that
#   utilizes this file (.dlx).
#
#   The information in this file provides you with the following:
#
#   1.  Help on how to load and display your Block UI Styler dialog in NX
#       using APIs provided in NXOpen.BlockStyler namespace
#   2.  The empty callback methods (stubs) associated with your dialog items
#       have also been placed in this file. These empty methods have been
#       created simply to start you along with your coding requirements.
#       The method name, argument list and possible return values have already
#       been provided for you.
# ==============================================================================

# ------------------------------------------------------------------------------
# These imports are needed for the following template code
# ------------------------------------------------------------------------------
import NXOpen
import NXOpen.BlockStyler
from pathlib import Path
import os
from utils import lw


# ------------------------------------------------------------------------------
# Represents Block Styler application cls
# ------------------------------------------------------------------------------
class del_toolholder_ui:
    # static class members
    theSession = None
    theUI = None

    # ------------------------------------------------------------------------------
    # Constructor for NX Styler class
    # ------------------------------------------------------------------------------
    def __init__(self, callBackGetData, callbackDelHolder):
        try:
            self.theSession = NXOpen.Session.GetSession()
            self.theUI = NXOpen.UI.GetUI()
            self.theDlxFileName = os.path.join(
                Path(__file__).parent, "del_toolholder_ui.dlx"
            )
            self.theDialog = self.theUI.CreateDialog(self.theDlxFileName)
            self.theDialog.AddApplyHandler(self.apply_cb)
            self.theDialog.AddOkHandler(self.ok_cb)
            self.theDialog.AddUpdateHandler(self.update_cb)
            self.theDialog.AddCancelHandler(self.cancel_cb)
            self.theDialog.AddInitializeHandler(self.initialize_cb)
            self.theDialog.AddDialogShownHandler(self.dialogShown_cb)

            self.callbackGetData = callBackGetData
            self.calbackDelete = callbackDelHolder
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            raise ex

    # ------------------------------- DIALOG LAUNCHING ---------------------------------
    #
    #     Before invoking this application one needs to open any part/empty part in NX
    #     because of the behavior of the blocks.
    #
    #     Make sure the dlx file is in one of the following locations:
    #         1.) From where NX session is launched
    #         2.) $UGII_USER_DIR/application
    #         3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    #             recommended. This variable is set to a full directory path to a file
    #             containing a list of root directories for all custom applications.
    #             e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
    #
    #     You can create the dialog using one of the following way:
    #
    #     1. Journal Replay
    #
    #         1) Replay this file through Tool->Journal->Play Menu.
    #
    #     2. USER EXIT
    #
    #         1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    #         2) Invoke the Shared Library through File->Execute->NX Open menu.
    #
    # ------------------------------------------------------------------------------

    # ------------------------------------------------------------------------------
    # This method launches the dialog to screen
    # ------------------------------------------------------------------------------
    def Launch(self):
        dialogResponse = NXOpen.BlockStyler.BlockDialog.DialogResponse.Invalid
        try:
            dialogResponse = self.theDialog.Launch()
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show(
                "Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex)
            )

        return dialogResponse

    # ------------------------------------------------------------------------------
    # Method Name: Dispose
    # ------------------------------------------------------------------------------
    def Dispose(self):
        if self.theDialog != None:
            self.theDialog.Dispose()
            self.theDialog = None

    # ------------------------------------------------------------------------------
    # ---------------------Block UI Styler Callback Functions--------------------------
    # ------------------------------------------------------------------------------

    # ------------------------------------------------------------------------------
    # Callback Name: initialize_cb
    # ------------------------------------------------------------------------------
    def initialize_cb(self):
        try:
            self.list_box0 = self.theDialog.TopBlock.FindBlock("list_box0")
            # ------------------------------------------------------------------------------
            # Registration of ListBox specific callbacks
            # ------------------------------------------------------------------------------
            # self.list_box0.SetAddHandler(self.AddCallback)
            self.AddCallback(self.list_box0)
            # self.list_box0.SetDeleteHandler(self.DeleteCallback)

            # ------------------------------------------------------------------------------
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show(
                "Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex)
            )

    # ------------------------------------------------------------------------------
    # Callback Name: dialogShown_cb
    # This callback is executed just before the dialog launch. Thus any value set
    # here will take precedence and dialog will be launched showing that value.
    # ------------------------------------------------------------------------------
    def dialogShown_cb(self):
        try:
            # ---- Enter your callback code here -----
            pass
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show(
                "Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex)
            )

    # ------------------------------------------------------------------------------
    # Callback Name: apply_cb
    # ------------------------------------------------------------------------------
    def apply_cb(self):
        errorCode = 0
        try:
            # ---- Enter your callback code here -----
            self.calbackDelete(self.list_box0.GetSelectedItemStrings()[0])
            self.ReloadCallback(self.list_box0)
            pass
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            errorCode = 1
            self.theUI.NXMessageBox.Show(
                "Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex)
            )

        return errorCode

    # ------------------------------------------------------------------------------
    # Callback Name: update_cb
    # ------------------------------------------------------------------------------
    def update_cb(self, block):
        try:
            if block == self.list_box0:
                # ---- Enter your code here -----
                pass
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show(
                "Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex)
            )

        return 0

    # ------------------------------------------------------------------------------
    # Callback Name: ok_cb
    # ------------------------------------------------------------------------------
    def ok_cb(self):
        errorCode = 0
        try:
            # ---- Enter your callback code here -----
            errorCode = self.apply_cb()
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            errorCode = 1
            self.theUI.NXMessageBox.Show(
                "Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex)
            )

        return errorCode

    # ------------------------------------------------------------------------------
    # Callback Name: cancel_cb
    # ------------------------------------------------------------------------------
    def cancel_cb(self):
        errorCode = 0
        try:
            # ---- Enter your callback code here -----
            pass
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            errorCode = 1
            self.theUI.NXMessageBox.Show(
                "Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex)
            )

        return errorCode

    # ------------------------------------------------------------------------------
    # ListBox specific callbacks
    # ------------------------------------------------------------------------------
    def AddCallback(self, list):
        holder_list = self.callbackGetData()
        list.SetListItems(holder_list)
        pass

    def ReloadCallback(self, list):
        list.SetListItems([])
        self.AddCallback(list)

    #

    # def DeleteCallback(self, list_box):
    #
    #

    # ------------------------------------------------------------------------------

    # ------------------------------------------------------------------------------
    # Function Name: GetBlockProperties
    # Returns the propertylist of the specified BlockID
    # ------------------------------------------------------------------------------
    def GetBlockProperties(self, blockID):
        try:
            return self.theDialog.GetBlockProperties(blockID)
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show(
                "Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex)
            )

        return None


def main():
    thedel_toolholder_ui = None
    try:
        thedel_toolholder_ui = del_toolholder_ui()
        #  The following method shows the dialog immediately
        thedel_toolholder_ui.Launch()
    except Exception as ex:
        # ---- Enter your exception handling code here -----
        NXOpen.UI.GetUI().NXMessageBox.Show(
            "Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex)
        )
    finally:
        if thedel_toolholder_ui != None:
            thedel_toolholder_ui.Dispose()
            thedel_toolholder_ui = None


if __name__ == "__main__":
    main()
