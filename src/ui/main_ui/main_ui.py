#==============================================================================
#   WARNING!!  This file is overwritten by the Block UI Styler while generating
#   the automation code. Any modifications to this file will be lost after
#   generating the code again.
# 
#        Filename:  C:\Users\cbr\Documents\Development\NXTools\src\ui\main_ui\main_ui.py
# 
#         This file was generated by the NX Block UI Styler
#         Created by: cbr
#               Version: NX 2212
#               Date: 04-12-2023  (Format: mm-dd-yyyy)
#               Time: 07:50 (Format: hh-mm)
# 
#==============================================================================

#==============================================================================
#   Purpose:  This TEMPLATE file contains Python source to guide you in the
#   construction of your Block application dialog. The generation of your
#   dialog file (.dlx extension) is the first step towards dialog construction
#   within NX.  You must now create a NX Open application that
#   utilizes this file (.dlx).
# 
#   The information in this file provides you with the following:
# 
#   1.  Help on how to load and display your Block UI Styler dialog in NX
#       using APIs provided in NXOpen.BlockStyler namespace
#   2.  The empty callback methods (stubs) associated with your dialog items
#       have also been placed in this file. These empty methods have been
#       created simply to start you along with your coding requirements.
#       The method name, argument list and possible return values have already
#       been provided for you.
#==============================================================================

#------------------------------------------------------------------------------
# These imports are needed for the following template code
#------------------------------------------------------------------------------
import NXOpen
import NXOpen.UF
import NXOpen.BlockStyler
import os
from pathlib import Path
from utils import BasicFunctions as BF
from locale.language_package import MainUILocale as Text
from utils import lw

#------------------------------------------------------------------------------
# Represents Block Styler application cls
#------------------------------------------------------------------------------
class main_ui:
    # static class members
    theSession = None
    theUI = None
    
    #------------------------------------------------------------------------------
    # Constructor for NX Styler class
    # ------------------------------------------------------------------------------
    def __init__(
        self,
        callbackRenumber,
        callbackTpGeo,
        callbackDelUde,
        callbackToolVectorPoint,
        callbackReportLength,
        callbackReportCSETime
    ):
        try:
            self.theSession = NXOpen.Session.GetSession()
            self.theUfSession = NXOpen.UF.UFSession.GetUFSession()
            self.theUI = NXOpen.UI.GetUI()
            self.theDlxFileName = os.path.join(Path(__file__).parent, "main_ui.dlx")
            self.theDialog = self.theUI.CreateDialog(self.theDlxFileName)
            self.theDialog.AddUpdateHandler(self.update_cb)
            self.theDialog.AddInitializeHandler(self.initialize_cb)
            self.theDialog.AddDialogShownHandler(self.dialogShown_cb)
            
            self.assets = os.path.join(Path(__file__).parent.parent.parent, r"assets\img")

            self.renumber = callbackRenumber
            self.tp_geo = callbackTpGeo
            self.del_ude = callbackDelUde
            self.tool_vec_point = callbackToolVectorPoint
            self.reportLength = callbackReportLength
            self.reportCSETime = callbackReportCSETime
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            raise ex
        
    
    # ------------------------------- DIALOG LAUNCHING ---------------------------------
    # 
    #     Before invoking this application one needs to open any part/empty part in NX
    #     because of the behavior of the blocks.
    # 
    #     Make sure the dlx file is in one of the following locations:
    #         1.) From where NX session is launched
    #         2.) $UGII_USER_DIR/application
    #         3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    #             recommended. This variable is set to a full directory path to a file 
    #             containing a list of root directories for all custom applications.
    #             e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
    # 
    #     You can create the dialog using one of the following way:
    # 
    #     1. Journal Replay
    # 
    #         1) Replay this file through Tool->Journal->Play Menu.
    # 
    #     2. USER EXIT
    # 
    #         1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    #         2) Invoke the Shared Library through File->Execute->NX Open menu.
    # 
    #------------------------------------------------------------------------------
    
    #------------------------------------------------------------------------------
    # This method launches the dialog to screen
    #------------------------------------------------------------------------------
    def Launch(self):
        dialogResponse = NXOpen.BlockStyler.BlockDialog.DialogResponse.Invalid
        try:
            dialogResponse = self.theDialog.Launch()
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
        return dialogResponse
    
    #------------------------------------------------------------------------------
    # Method Name: Dispose
    #------------------------------------------------------------------------------
    def Dispose(self):
        if self.theDialog != None:
            self.theDialog.Dispose()
            self.theDialog = None
    
    #------------------------------------------------------------------------------
    # ---------------------Block UI Styler Callback Functions--------------------------
    #------------------------------------------------------------------------------
    
    #------------------------------------------------------------------------------
    # Callback Name: initialize_cb
    #------------------------------------------------------------------------------
    def initialize_cb(self):
        try:
            self.numberTools_btn = self.theDialog.TopBlock.FindBlock("numberTools_btn")
            self.tpGeo_btn = self.theDialog.TopBlock.FindBlock("tpGeo_btn")
            self.delUde_btn = self.theDialog.TopBlock.FindBlock("delUde_btn")
            self.createpv_btn = self.theDialog.TopBlock.FindBlock("createpv_btn")
            self.reportLength_btn = self.theDialog.TopBlock.FindBlock("reportLength_btn")
            self.reportCSETime_btn = self.theDialog.TopBlock.FindBlock("reportCSETime_btn")
            #Label
            self.tpGeo_btn.Label = BF.get_text(Text.labelTPtoLines)
            self.delUde_btn.Label = BF.get_text(Text.labelDelUde)
            self.createpv_btn.Label = BF.get_text(Text.labelPointVector)
            
            #BallonToolTips
            self.reportLength_btn.BalloonTooltipText = BF.get_text(Text.tpReportLength)
            
            #BalloTooltipImage
            self.reportLength_btn.BalloonTooltipImage =os.path.join(self.assets, "ReportLength.bmp")

        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
    
    #------------------------------------------------------------------------------
    # Callback Name: dialogShown_cb
    # This callback is executed just before the dialog launch. Thus any value set 
    # here will take precedence and dialog will be launched showing that value. 
    #------------------------------------------------------------------------------
    def dialogShown_cb(self):
        try:
            # ---- Enter your callback code here -----
            pass
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
    
    #------------------------------------------------------------------------------
    # Callback Name: update_cb
    #------------------------------------------------------------------------------
    def update_cb(self, block):
        try:
            if block == self.numberTools_btn:
                # ---- Enter your code here -----
                self.renumber()
                pass
            elif block == self.tpGeo_btn:
                # ---- Enter your code here -----
                self.tp_geo()
                pass
            elif block == self.delUde_btn:
                # ---- Enter your code here -----
                self.del_ude()
                pass
            elif block == self.createpv_btn:
                # ---- Enter your code here -----
                self.tool_vec_point()
                pass
            elif block == self.reportLength_btn:
                # ---- Enter your code here -----
                self.reportLength()
                pass
            elif block == self.reportCSETime_btn:
                # ---- Enter your code here -----
                self.reportCSETime()
                pass
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
        return 0
    
    #------------------------------------------------------------------------------
    # Function Name: GetBlockProperties
    # Returns the propertylist of the specified BlockID
    #------------------------------------------------------------------------------
    def GetBlockProperties(self, blockID):
        try:
            return self.theDialog.GetBlockProperties(blockID)
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
        return None
    
def main():
    themain_ui = None
    try:
        themain_ui =  main_ui()
        #  The following method shows the dialog immediately
        themain_ui.Launch()
    except Exception as ex:
        # ---- Enter your exception handling code here -----
        NXOpen.UI.GetUI().NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
    finally:
        if themain_ui != None:
            themain_ui.Dispose()
            themain_ui = None
    
if __name__ == '__main__':
    main()

